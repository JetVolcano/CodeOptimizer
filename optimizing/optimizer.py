def optimize(file_path: str, key: str):
    try:
        def get_lang(type: str):
            type = type.casefold()
            keys: dict[str, str] = {
                'py': 'python',
                'pyw': 'python windowed script',
                'js': 'javascript',
                'mjs': 'javascript module',
                'cjs': 'commonjs javascript module',
                'ts': 'typescript',
                'tsx': 'typescript react component',
                'jsx': 'javascript react component', 
                'cpp': 'c++',
                'cxx': 'c++',
                'cc': 'c++',
                'c': 'c',
                'h': 'c/c++ header',
                'hpp': 'c++ header',
                'hxx': 'c++ header',
                'cs': 'c#',
                'fs': 'f#',
                'fsx': 'f# script',
                'java': 'java',
                'kt': 'kotlin',
                'kts': 'kotlin script',
                'scala': 'scala',
                'sc': 'scala script',
                'rb': 'ruby',
                'php': 'php',
                'go': 'go',
                'swift': 'swift',
                'rs': 'rust',
                'lua': 'lua',
                'pl': 'perl',
                'pm': 'perl module',
                'r': 'r',
                'dart': 'dart',
                'html': 'html',
                'htm': 'html',
                'css': 'css',
                'scss': 'sass/scss',
                'sass': 'sass',
                'less': 'less',
                'vue': 'vue component',
                'svelte': 'svelte component',
                'json': 'json',
                'jsonc': 'json with comments',
                'xml': 'xml',
                'yaml': 'yaml',
                'yml': 'yaml',
                'toml': 'toml',
                'ini': 'ini configuration',
                'cfg': 'configuration',
                'conf': 'configuration',
                'properties': 'java properties',
                'csv': 'comma-separated values',
                'tsv': 'tab-separated values',
                'sh': 'shell script (bash/sh/zsh)',
                'bash': 'bash script',
                'zsh': 'zsh script',
                'fish': 'fish shell script',
                'ps1': 'powershell script',
                'psm1': 'powershell module',
                'psd1': 'powershell data file',
                'bat': 'windows batch script',
                'cmd': 'windows command script',
                'md': 'markdown',
                'markdown': 'markdown',
                'rst': 'restructuredtext',
                'tex': 'latex',
                'log': 'log file',
                'txt': 'text',
                'adoc': 'asciidoc',
                'asciidoc': 'asciidoc',
                'sql': 'sql',
                'dockerfile': 'dockerfile',
                'makefile': 'makefile',
                'gradle': 'gradle build script',
                'pom': 'maven project object model (xml)',
                'sln': 'visual studio solution',
                'csproj': 'c# project file',
                'vbproj': 'vb.net project file',
                'env': 'environment variables',
                'gitignore': 'git ignore rules',
                'gitattributes': 'git attributes',
                'editorconfig': 'editor config',
                'requirements': 'python requirements',
                'lock': 'dependency lock file',
                'diff': 'diff file',
                'patch': 'patch file',
                'bin': 'binary file',
                'exe': 'windows executable',
                'dll': 'windows dynamic link library',
                'so': 'linux shared object',
                'dylib': 'macos dynamic library',
                'zip': 'zip archive',
                'tar': 'tar archive',
                'gz': 'gzip compressed archive',
                'bz2': 'bzip2 compressed archive',
                'xz': 'xz compressed archive',
                'rar': 'rar archive',
                '7z': '7zip archive',
                'iso': 'disk image',
                'img': 'disk image',
                'pdf': 'portable document format',
                'png': 'portable network graphics image',
                'jpg': 'jpeg image',
                'jpeg': 'jpeg image',
                'gif': 'graphics interchange format image',
                'svg': 'scalable vector graphics',
                'webp': 'webp image',
                'ico': 'icon file',
                'mp3': 'mp3 audio',
                'wav': 'wav audio',
                'ogg': 'ogg audio/video container',
                'mp4': 'mp4 video',
                'mov': 'quicktime video',
                'avi': 'avi video',
                'webm': 'webm video',
            }
            return keys[type]
        from google import genai
        client = genai.Client(api_key=key)
        file = open(file_path, 'r+')
        response = client.models.generate_content(
            model="gemini-2.5-pro-exp-03-25",
            contents = ['optimize my code and output raw code', file.read()]
        )
        filetype = file.name.split('.')[-1]
        filetype = get_lang(filetype)
        code = response.text.split(f'```')[1].split('```')[0].split(filetype)[1].strip()
        file.writelines(["\n", "\n", code])
    except Exception as e:
        print(e)